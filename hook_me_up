#!/usr/bin/perl


use strict;
use warnings;

use File::Find;
use File::Copy;

my $hook_dir = "/home/twist/projects/githooks";
my @found_hooks;
my @hooks = ("prepare-commit-msg","pre-commit", "post-commit");

main();


sub main
{

	my $init = 0;
	my $repo_only = 0;

	for(my $i = 0; $i < @ARGV; $i++)
	{
		if ($ARGV[$i] =~ "--init")
		{
			$init = 1;
		}
		if ($ARGV[$i] =~ "--repositorie-only")
		{
			$repo_only = 1;
		}
	}






	if ($init == 1)
	{
		hook_menu();
	}
		

}




sub hook_menu
{

        @hooks = get_all_hooks();
	#menue loop
	while (1)
	{
		print "\ni found the following hooks: \n\n";
		my $i = 1;
		foreach my $hook (@hooks)
		{
			print $hook->{"mark"}." ".$i++.". ".$hook->{"HMU_NAME"}." - ".$hook->{"HMU_DESCR"}."\n";
		}
		print "\n***commands***\n";
		print " a) use all hooks\n";
		print " m) use marked hooks\n";
		print " 1-".($i-1)." mark/unmark hook\n";
		print " q) quit\n";
		print " \n";
		my $command = <STDIN>;
		if ($command =~ /a/)
		{
			init_repository();
			print "all found hooks are now in your .git/hooks directory\n";
			last;
		}
		elsif ($command =~ /\d/)
		{
			@hooks[$command-1]->{"mark"} = "*";
		}
		elsif ($command =~ /q/)
		{
			last;
		}
		elsif ($command =~ /a/)
		{
		}
	}

}

sub parse_hook
{
	my ($hook) = @_;
	
	open FILE, ($hook) or die "ADASSD";
	my $hook_data = {};

	#defaults
	$hook_data->{"HMU_NAME"} = $hook;
	$hook_data->{"path"} = $hook;
	$hook_data->{"HMU_DESCR"} = "no description given";
	$hook_data->{"mark"} = " ";

	while ( my $line = <FILE>)
	{
		if ($line =~ /HMU_NAME: (.*)$/)
		{
			$hook_data->{"HMU_NAME"} = $1;
		}
		if ($line =~ /HMU_DESCR: (.*)$/)
		{
			$hook_data->{"HMU_DESCR"} = $1;
		}
	}
	close FILE;
	return $hook_data;
}

sub init_repository
{
        foreach my $hook (@found_hooks)
        {
                copy($hook, ".git/hooks/");
        }
        foreach my $hook (@hooks)
        {
                chmod(0744, ".git/hooks/$hook");
        }

}


sub get_all_hooks
{
     	find(\&wanted, $hook_dir);  
	my @hooks;
     	foreach my $hook (@found_hooks)
     	{
		push(@hooks, parse_hook($hook));
	}

	return @hooks

}


sub wanted
{
        /\.git/ and $File::Find::prune = 1;
        foreach my $hook (@hooks)
        {
                if ($_ =~ /$hook/)
                {
                        push(@found_hooks, $File::Find::name);
                }
        }


}
